{"ast":null,"code":"import _asyncToGenerator from \"/Users/alexfederico/Documents/GitHub/RestaurantApp/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n    this.apiServerUrl = environment.apiBaseUrl;\n  }\n\n  getRestaurants() {\n    return this.http.get(`${this.apiServerUrl}/restaurant/all`);\n  }\n\n  addRestaurant(restaurant) {\n    return this.http.post(`${this.apiServerUrl}/restaurant/add`, restaurant);\n  }\n\n  updateRestaurant(restaurant) {\n    return this.http.put(`${this.apiServerUrl}/restaurant/update`, restaurant);\n  }\n\n  deleteRestaurant(restaurantId) {\n    return this.http.delete(`${this.apiServerUrl}/restaurant/delete/${restaurantId}`);\n  }\n\n  login(auth) {\n    const email = auth.email;\n    const password = auth.password;\n    const headers = new HttpHeaders({\n      Authorization: 'Basic ' + btoa(email + \":\" + password)\n    });\n    this.headers = new HttpHeaders({\n      Authorization: 'Basic ' + btoa(email + \":\" + password)\n    });\n    sessionStorage.setItem(\"headers\", btoa(email + \":\" + password));\n    return this.http.get(`${this.apiServerUrl}/login`, {\n      headers,\n      responseType: 'text'\n    });\n  }\n\n  userid(username) {\n    return _asyncToGenerator(function* () {\n      var uid;\n      const usernameURL = \"httpL//localhost:8080/admin/find/\";\n    })();\n  }\n\n}\n\nRestaurantService.ɵfac = function RestaurantService_Factory(t) {\n  return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRestaurantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestaurantService,\n  factory: RestaurantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,WAArB,QAAwC,sBAAxC;AAGA,SAASC,WAAT,QAA4B,8BAA5B;;;AAMA,OAAM,MAAOC,iBAAP,CAAwB;EAI5BC,YAAoBC,IAApB,EAAoC;IAAhB;IADZ,oBAAeH,WAAW,CAACI,UAA3B;EACiC;;EAElCC,cAAc;IACnB,OAAO,KAAKF,IAAL,CAAUG,GAAV,CAAmB,GAAG,KAAKC,YAAY,iBAAvC,CAAP;EACD;;EAEMC,aAAa,CAACC,UAAD,EAAuB;IACzC,OAAO,KAAKN,IAAL,CAAUO,IAAV,CAA2B,GAAG,KAAKH,YAAY,iBAA/C,EAAkEE,UAAlE,CAAP;EACD;;EAEME,gBAAgB,CAACF,UAAD,EAAuB;IAC5C,OAAO,KAAKN,IAAL,CAAUS,GAAV,CAA0B,GAAG,KAAKL,YAAY,oBAA9C,EAAoEE,UAApE,CAAP;EACD;;EAEMI,gBAAgB,CAACC,YAAD,EAAqB;IAC1C,OAAO,KAAKX,IAAL,CAAUY,MAAV,CAAuB,GAAG,KAAKR,YAAY,sBAAsBO,YAAY,EAA7E,CAAP;EACD;;EAEME,KAAK,CAACC,IAAD,EAAU;IACpB,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;IACA,MAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAtB;IACA,MAAMC,OAAO,GAAG,IAAIrB,WAAJ,CAAiB;MAACsB,aAAa,EAAE,WAASC,IAAI,CAACJ,KAAK,GAAC,GAAN,GAAUC,QAAX;IAA7B,CAAjB,CAAhB;IAEA,KAAKC,OAAL,GAAe,IAAIrB,WAAJ,CAAiB;MAACsB,aAAa,EAAE,WAASC,IAAI,CAACJ,KAAK,GAAC,GAAN,GAAUC,QAAX;IAA7B,CAAjB,CAAf;IAEAI,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkCF,IAAI,CAACJ,KAAK,GAAC,GAAN,GAAUC,QAAX,CAAtC;IACA,OAAO,KAAKhB,IAAL,CAAUG,GAAV,CAAc,GAAG,KAAKC,YAAY,QAAlC,EAA2C;MAACa,OAAD;MAAUK,YAAY,EAAE;IAAxB,CAA3C,CAAP;EACD;;EAEYC,MAAM,CAACC,QAAD,EAAiB;IAAA;MAClC,IAAIC,GAAJ;MACA,MAAMC,WAAW,GAAW,mCAA5B;IAFkC;EAGnC;;AApC2B;;;mBAAjB5B,mBAAiB6B;AAAA;;;SAAjB7B;EAAiB8B,SAAjB9B,iBAAiB;EAAA+B,YAFhB","names":["HttpHeaders","environment","RestaurantService","constructor","http","apiBaseUrl","getRestaurants","get","apiServerUrl","addRestaurant","restaurant","post","updateRestaurant","put","deleteRestaurant","restaurantId","delete","login","auth","email","password","headers","Authorization","btoa","sessionStorage","setItem","responseType","userid","username","uid","usernameURL","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/alexfederico/Documents/GitHub/RestaurantApp/frontend/src/app/restaurant.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { Restaurant } from './restaurant';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  headers:any;\n\n  private apiServerUrl = environment.apiBaseUrl;\n  constructor(private http: HttpClient) { }\n\n  public getRestaurants(): Observable<any>{\n    return this.http.get<any>(`${this.apiServerUrl}/restaurant/all`);\n  }\n\n  public addRestaurant(restaurant: Restaurant): Observable<Restaurant>{\n    return this.http.post<Restaurant>(`${this.apiServerUrl}/restaurant/add`, restaurant);\n  }\n\n  public updateRestaurant(restaurant: Restaurant): Observable<Restaurant>{\n    return this.http.put<Restaurant>(`${this.apiServerUrl}/restaurant/update`, restaurant);\n  }\n\n  public deleteRestaurant(restaurantId: number): Observable<void>{\n    return this.http.delete<void>(`${this.apiServerUrl}/restaurant/delete/${restaurantId}`);\n  }\n\n  public login(auth: any){\n    const email = auth.email;\n    const password = auth.password\n    const headers = new HttpHeaders ({Authorization: 'Basic '+btoa(email+\":\"+password)});\n\n    this.headers = new HttpHeaders ({Authorization: 'Basic '+btoa(email+\":\"+password)});\n\n    sessionStorage.setItem(\"headers\", btoa(email+\":\"+password));\n    return this.http.get(`${this.apiServerUrl}/login`,{headers, responseType: 'text' as 'json'});\n  }\n\n  public async userid(username: string):Promise<string>{\n    var uid! : string;\n    const usernameURL: string = \"httpL//localhost:8080/admin/find/\";\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}